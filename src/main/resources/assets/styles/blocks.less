// Overlay when editing and for dialogs
@import "/constants/blocks/core?type=less";
@import "/constants/blocks/media/core?type=less";

//-----LIBRARIES-----
@import "/assets/webjars/less-animate/1.0.0/source/pulse.less";
@import "/assets/webjars/font-awesome/4.3.0/less/variables.less";
@import "/assets/webjars/font-awesome/4.3.0/less/core.less";
@import "/assets/webjars/font-awesome/4.3.0/less/icons.less";
@import "/assets/webjars/font-awesome/4.3.0/less/animated.less";
@import "/assets/webjars/font-awesome/4.3.0/less/mixins.less";
@import "/assets/webjars/font-awesome/4.3.0/less/rotated-flipped.less";
@import "/assets/styles/loader.less";
@import "/assets/styles/finder.less";

@finderBgColor: #ffffff;

//-----BASIC BOOTSTRAP MIXINS-----
@import "/assets/webjars/bootstrap/3.3.4/less/variables.less";
@import "/assets/webjars/bootstrap/3.3.4/less/mixins.less";
@import "/assets/webjars/bootstrap/3.3.4/less/utilities.less";
// Reset and dependencies
@import "/assets/webjars/bootstrap/3.3.4/less/normalize.less";
// Core CSS
@import "/assets/webjars/bootstrap/3.3.4/less/buttons.less";
@import "/assets/webjars/bootstrap/3.3.4/less/forms.less";
// Components
@import "/assets/webjars/bootstrap/3.3.4/less/dropdowns.less";
@import "/assets/webjars/bootstrap/3.3.4/less/button-groups.less";
@import "/assets/webjars/bootstrap/3.3.4/less/input-groups.less";
@import "/assets/webjars/bootstrap/3.3.4/less/panels.less";
@import "/assets/webjars/bootstrap/3.3.4/less/type.less";
@import "/assets/webjars/bootstrap/3.3.4/less/thumbnails.less";
@import "/assets/webjars/bootstrap/3.3.4/less/wells.less";

//-----MIXINS-----
//note that this requires a relatively positioned parent
.inline-input-buttons() {
  @inputZIndex: 2;

  //make the wrapping container look like an input box
  @border-color: #ccc;
  @background-color: #ffffff;
  border: 1px solid @border-color;
  background-color: @background-color;
  .box-shadow(inset 0 1px 1px rgba(0, 0, 0, .075)); // Redeclare so transitions work
  padding-right: 8px; //this is the default value of an input box

  &.focus {
    @color: @input-border-focus;
    @color-rgba: rgba(red(@color), green(@color), blue(@color), .6);
    border-color: @color;
    outline: 0;
    .box-shadow(~"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px @{color-rgba}");
  }

  // this will reset the bootstrap shadows etc on the input and buttons
  // because we'll simulate it on the wrapping container instead
  input[type='text'],
  .input-group-btn .btn {
    border: none;
    .box-shadow(none);
    background-color: transparent;
  }

  input[type='text'] {
    padding-right: 3px; //reset because we set it on the wrapper instead
    left: -1px; //something weird: the vertical separator between the input and the buttons seems to overflow without a little help...
  }

  @bgColor: #ffffff;
  .input-group-btn {
    background-color: @bgColor;
    width: 1%;

    .btn {
      display: none;
      cursor: pointer;
      text-shadow: 0 1px 0 #fff;
      color: #333;
      padding-left: 10px;
      padding-right: 3px;
      background-color: @bgColor;

      &.show {
        //the .show class from bootstrap forces this to become a block, and it messes up the floating
        display: inline-block !important;
      }

      .fa {
        .opacity(0.4) !important;
      }
      &:hover {
        .fa {
          .opacity(0.6) !important;
        }
      }
    }

    //From http://stackoverflow.com/questions/2717480/css-selector-for-first-element-with-class/8539107#8539107
    // Select all .shown buttons that are children of .input-actions, including the first one
    & > .btn.show {
      border-left: 1px solid rgba(0, 0, 0, 0.1);
    }
    //Then "undo" the styles for elements with the class that come after the first one
    & > .btn.show ~ .btn.show {
      border-left: 1px solid transparent;
    }
  }
}

//overloaded from elements.less to be able to specify the property
.transition(@duration:0.2s, @ease:ease-out, @property: all) {
  -webkit-transition: @property @duration @ease;
  -moz-transition: @property @duration @ease;
  -o-transition: @property @duration @ease;
  transition: @property @duration @ease;
}

//-----MAIN-----
html {
  position: relative;
  min-height: 100%;

  //don't enable: it messes up the default bootstrap sticky footer
  //height: 100%;
}

body.@{BODY_EDIT_MODE_CLASS} {
  //this will allow the sidebar and the page wrapper scroll independently from the body (now done in js code)
  //overflow: hidden;
}

.@{BLOCK_OVERLAYS_WRAPPER_CLASS} {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

//setup feedback for save/delete/... buttons
.btn {
  &.@{BTN_BUSY_CLASS},
  &.@{BTN_SUCCESS_CLASS} {

    //hide all elements inside it
    & > * {
      display: none;
    }
    //change the contents of the icon
    & > .fa {
      display: inline-block;
    }
  }
  &.@{BTN_BUSY_CLASS} {
    //change the contents of the icon
    & > .fa {
      &:extend(.fa-circle-o-notch all);
    }
  }
  //needs to come after the BUSY class because it overwrites it
  &.@{BTN_SUCCESS_CLASS} {
    & > .fa {
      &:extend(.fa-check-circle all);
    }
  }
}

.list-group {
  //add some nice striping
  & > .list-group-item:nth-child(odd) {
    background-color: lighten(@btn-primary-bg, 50%);
    &:hover {
      background-color: lighten(@btn-primary-bg, 45%);
    }
  }
}

@mainMenuHeight: 40px;
@initSidebarWidth: 0%;
.@{BLOCK_OVERLAY_CLASS} {
  position: absolute;
  top: 0px;
  left: 0px;
  right: 0px;
  bottom: 0px;

  .defaultBorder() {

    border: 1px dotted rgba(100, 100, 100, 0.8);

    &.left {
      border-left: none;
    }
    &.top {
      border-top: none;
    }
  }
;

  .defaultBorder();

  // This disables pointer events for the element itself,
  // but 'bubbles up' lower cursors like the mouse would eg. hover over them
  // Note that this sits in the way of using the hover-related events on these objects,
  // so don't use them by default, but activate them on mousedown,
  // so we can use the lower elements during the focus-phase (see mouse.js)
  &.@{BLOCK_OVERLAY_NO_EVENTS_CLASS} {
    pointer-events: none;
  }

  //this is probably a good general choice
  cursor: pointer;

  &.@{OVERLAY_HOVER_CLASS} {
    box-shadow: 0px 0px 10px rgba(1, 0, 0, 0.5);
    border: none;

    //undo the hover effects: we're dragging and it clutters the visibility of the drop lines
    &.@{BLOCK_OVERLAY_BLOCK_HOVER} {
      box-shadow: none;
      .defaultBorder();
    }
  }
  &.@{OVERLAY_DRAGGING_CLASS} {
    background-color: rgba(00, 102, 204, 0.5);
  }
}

.@{BLOCKS_DROPSPOT_CLASS} {
  @startColor: @brand-primary;
  @startColorHex: argb(@startColor);
  @stopColor: fadeout(@startColor, 100%);
  @stopColorHex: argb(@stopColor);
  @width: ~"@{BLOCKS_DROPSPOT_BORDER_WIDTH}px";
  @style: solid;
  @offsetPct: 5%;
  @startPct: @offsetPct;
  @stopPct: 100% - @offsetPct;

  border: none;
  &.@{BLOCKS_DROPSPOT_CLASS}-top,
  &.@{BLOCKS_DROPSPOT_CLASS}-bottom {
    background: -moz-linear-gradient(left,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,@stopColor), color-stop(@startPct,@startColor), color-stop(50%,@startColor), color-stop(@stopPct,@startColor), color-stop(100%,@stopColor)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(left,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(left,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(left,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* IE10+ */
    background: linear-gradient(to right,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* W3C */
  }
  &.@{BLOCKS_DROPSPOT_CLASS}-right,
  &.@{BLOCKS_DROPSPOT_CLASS}-left {
    background: -moz-linear-gradient(top,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,@stopColor), color-stop(@startPct,@startColor), color-stop(50%,@startColor), color-stop(@stopPct,@startColor), color-stop(100%,@stopColor)); /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* Opera 11.10+ */
    background: -ms-linear-gradient(top,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* IE10+ */
    background: linear-gradient(to bottom,  @stopColor 0%, @startColor @startPct, @startColor 50%, @startColor @stopPct, @stopColor 100%); /* W3C */
  }
}

.@{PROPERTY_OVERLAY_CLASS} {
  position: absolute;
  border: 1px dotted rgba(100, 100, 100, 0.8);
  cursor: text;

  &.left {
    border-left: none;
  }

  &.top {
    border-top: none;
  }

  &.right {
    border-right: none;
  }

  &.bottom {
    border-bottom: none;
  }

  &.@{OVERLAY_HOVER_CLASS} {
    border: 1px solid rgba(0, 0, 0, 1);
  }
}

.@{OPACITY_CLASS} {
  opacity: 0.2;
  -webkit-filter: blur(5px) grayscale(20%);
  -moz-filter: blur(5px) grayscale(20%);
  -o-filter: blur(5px) grayscale(20%);
  -ms-filter: blur(5px) grayscale(20%);
  filter: blur(5px) grayscale(1);
}

.@{PREVENT_BLUR_CLASS} {
  opacity: 1.0 !important;
  -webkit-filter: blur(0) !important;
  -moz-filter: blur(0) !important;
  -o-filter: blur(0) !important;
  -ms-filter: blur(0) !important;
  filter: blur(0) !important;
}

.@{COLUMN_RESIZER_CLASS} {
  @controlBgColor: #e8e8e8;

  position: absolute;
  cursor: col-resize;
  background: darken(@controlBgColor, 10%) url('/assets/images/blocks/splitter_ver_padded.png') center center repeat-y;
  border-left: 1px solid darken(@controlBgColor, 15%);
  border-right: 1px solid darken(@controlBgColor, 15%);
}

// Classes for the body that force the cursor in a certain style
body.@{FORCE_DRAG_CURSOR_CLASS}, body.@{FORCE_DRAG_CURSOR_CLASS} * {
  cursor: grabbing !important;
  cursor: -moz-grabbing !important;
  cursor: -webkit-grabbing !important;
}

body.@{FORCE_RESIZE_CURSOR_CLASS}, body.@{FORCE_RESIZE_CURSOR_CLASS} * {
  cursor: col-resize !important;
}

// Class put when a property is content-editable and active
// so when cvan set the outline we want for this property
.@{PROPERTY_EDIT_CLASS} {
  outline: 1px dotted rgba(100, 100, 100, 0.8);
}

[property]:focus {
  outline: 1px dotted rgba(100, 100, 100, 0.8);
}

.@{PREVENT_SELECTION_CLASS} {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

iframe {
  pointer-events: none;
}

// force for height wrapping divs
.image {
  display: inline-block;
}

iframe.edit {
  pointer-events: auto;
}

.blocks-resizing {
  cursor: col-resize;
}

ul.@{BLOCK_ACTIONS_CLASS} {
  &:extend(.form-group);
  list-style-type: none;
  padding-left: 0;

  &:last-child {
    margin-bottom: 0;
  }

  li {
    .clearfix;
    margin-bottom: 5px;

    &:last-child {
      margin-bottom: 0;
    }
  }
}

//use this as a wrapper for the text under a header (or something else) to space it up a bit
.sub-container {
  margin-top: 20px;
  margin-left: 20px;
}

.@{PAGE_CONTENT_CLASS} {
  position: relative; //we can only make sticky footers work when this is relative
  z-index: 0;
  //  margin-top: @mainMenuHeight;
  width: 100% - @initSidebarWidth;

  //TODO: error (activate the body overflow to hidden to see why)
  //this will make the left panel scroll independently from the sidebar
  //height: 100%;
  //overflow-y: auto;
}

@sidebarTabHeight: 41px;
//this is taken from a real world example, hope it won't change
.@{PAGE_SIDEBAR_CLASS} {
  //Sync this with the bgColor of the finder
  @controlBgColor: #e8e8e8;
  @bgColor: #fafafa;
  @resizerWidth: 6px;
  position: fixed;
  top: 0px;
  right: 0px;
  bottom: 0px;
  padding-left: @resizerWidth;
  .drop-shadow(-1px, 0px, 4px, 0.4);
  background-color: @bgColor;

  width: @initSidebarWidth;
  //animates the width only when not DnD-ing (see js code)
  &.@{SIDEBAR_ANIMATED_CLASS} {
    .transition(0.2s, ease-in, width);
  }

  .@{PAGE_SIDEBAR_RESIZE_CLASS} {
    position: absolute;
    left: 0;
    top: 0;
    width: @resizerWidth;
    height: 100%;
    cursor: col-resize;
    background: darken(@controlBgColor, 10%) url('/assets/images/blocks/splitter_ver_padded.png') center center repeat-y;
    border-left: 1px solid darken(@controlBgColor, 40%);
    border-right: 1px solid darken(@controlBgColor, 15%);

    z-index: 3;
  }

  .popover {
    &:extend(.@{PREVENT_BLUR_CLASS});
  }

  .nav-tabs {
    height: @sidebarTabHeight;
    overflow: hidden;
    background-color: @controlBgColor;
    border-bottom: 0px;

    //make the tabs work with the negative margins below
    position: relative;
    z-index: 1000;

    //something special: only active tabs or explicitly 'show'-ing tabs are shown (this way, we have control over the 'hidden' tabs)
    & > li {
      display: none;
      &.show,
      &.active {
        display: block;
      }
    }

    & > li:first-child > a {
      border-left-width: 0;
    }

    & > li > a {
      border: 1px solid transparent;
      .border-radius(0 0 0 0);
      &:hover {
        border-color: transparent;
      }
    }

    & > li.active > a {
      background-color: @bgColor;
    }
  }

  //this is the container that hold the data of the side panel (without the tabs, resizer, etc)
  .tab-content {
    position: relative; //needed to make some children absolute
    //next three make the content pane 100% in height (needed for eg. finder)
    height: 100%;
    margin-top: -@sidebarTabHeight;
    padding-top: @sidebarTabHeight;

    //only scroll starting from this panel so the resize handler doesn't scroll away
    overflow-y: auto;
  }

  .tab-pane {
    @sidebarPanelMargin: 10px;
    .panel {
      margin: @sidebarPanelMargin;

      label {
        font-weight: normal;
      }

      .collapser {
        cursor: pointer;

        &:after {
          font-family: fontawesome;
          text-shadow: 0 1px 0 #fff;
          content: @fa-var-chevron-down;
          float: right;
          color: grey;

          .transition(0.2s, ease-in);
        }
        &.collapsed:after {
          .fa-icon-rotate(90deg, 1);
        }
      }

      hr {
        //small adjustment to make it look better
        margin-bottom: 15px;
      }

      .form-group {
        .clearfix();

        .input-group {
          width: 100%;
          &.@{INPUT_WITH_BUTTONS_CLASS} {
            .inline-input-buttons();
          }
        }
        //make all dropdowns behave more like <select>s
        .dropdown,
        .checkbox,
        .@{RADIO_GROUP_CLASS} {
          @textAlign: left;
          @formAlign: right;
          @caretAlign: right;
          text-align: @formAlign;

          .pull-right();

          &.checkbox {
            top: -0.7em; //align it with the label
          }

          &.@{RADIO_GROUP_CLASS} {
            //Because of the way radio groups look (a single label and a large vertical block of radios),
            //the margin with a possibly next element looks off like there's too much spacing between them.
            //This 'fixes' that situation.
            margin-bottom: -20px;

            .radio {
              text-align: @textAlign;
              //align the first radio with the label
              &:first-child {
                margin-top: 0;
              }
              //remove the margin of the last child because the form-group takes care of that
              &:last-child {
                margin-bottom: 0;
              }
            }
          }

          .dropdown-toggle {
            //min-width: 100px;
            text-align: @textAlign;

            .caret {
              &:extend(.pull-@{caretAlign});
              margin-top: 0.7em; //floating the caret seems to change it's height...
            }
          }
          .dropdown-menu {
            min-width: 0; //reset
            max-height: 300px; //don't let the dropdown grow outside the page
            max-width: 240px; // a good default value so large strings make the dropdown scroll horizontally
            overflow: auto; //make the menu act like a combobox
            &:extend(.dropdown-menu-@{formAlign});
            & > li {
              //it's a bit weird to align long lists of text to the right,
              //don't do it, it's difficult to read (although the menu itself is aligned to the right)
              text-align: left;

              & > a {
                cursor: pointer;
              }
            }
          }
        }
        .slider.slider-horizontal {
          width: 100%;

          .slider-handle {
            //disable the gradient and override the color of the handle with a plain primary button color
            background-image: none !important;
            background-color: @btn-primary-bg;
          }
        }

        .btn-toggle {
          &:hover {
            background-color: transparent;
          }
        }
      }

      .@{CREATE_LINK_WRAPPER_CLASS} {
        &.active {
          border: 1px solid lighten(@btn-default-border, 13%);
          //background-color: @panel-default-heading-bg;
          padding: 5px 5px 1px 5px;
          margin-top: 20px;
          margin-bottom: 15px;
          margin-left: -5px;
          margin-right: -5px;

          .form-group:last-child {
            margin-bottom: 5px;
          }
        }
        &:last-child {
          margin-bottom: 0;
        }
      }

      //general class used for the container of a panel actions buttons
      .actions {
        margin-top: 5px;
      }
    }
    .panel.@{SIDEBAR_FINDER_PANEL_CLASS} {
      //stretches open the entire finder
      position: absolute;
      right: 0;
      left: 0;
      bottom: 0;
      top: @sidebarTabHeight;

      //we need to stretch this one open as well
      .collapse {
        height: 100%;
      }
      .panel-body {
        padding: 0px;
        height: 100%;
        margin-top: -@sidebarTabHeight;
        padding-top: @sidebarTabHeight;

        .@{SELECT_BTN_CLASS},
        .@{CANCEL_BTN_CLASS} {
          .btn-sm();
        }
        .@{SELECT_BTN_CLASS} {
          .btn-primary();
        }
        .@{CANCEL_BTN_CLASS} {
          .btn-default();
        }
      }
    }
  }
}

.@{BLOCKS_START_BUTTON} {
  display: block;
  position: fixed;
  font-size: 36px;
  top: @sidebarTabHeight/5; //"5" is trial and error
  right: 20px;
  cursor: pointer;
  z-index: 10000;
  color: #000000;

  &:extend(.@{PREVENT_BLUR_CLASS});

  .opacity(0.4) !important;
  &:hover {
    color: #222222;
    .opacity(0.6) !important;
  }

  &:before {
    &:extend(.fa);
    content: "\f14b";
  }

  &.open {
    //mimicks .close btn
    text-shadow: 0 1px 0 #fff;
    font-size: 20px;

    &:before {
      content: "\f00d"; //fa-times
    }
  }
}

#@{SIDEBAR_CONTEXT_ID} {
  .setupLoader();
}

#@{SIDEBAR_FILES_ID} {
  .setupLoader();
}

.@{HIGHLIGHT_CLASS},
.@{HIGHLIGHT_CLASS}:focus {
  .animated(0.3s);
  //.pulse;
}

.@{REMOVE_BLOCK_CLASS} {
  margin-bottom: 0px;
  .panel-body {
    padding-top: 3px;
    padding-bottom: 3px;
  }
  .text {
    line-height: 32px;
  }

  .confirm-text {
    padding-bottom: 5px;
  }

  .btn {
    margin-right: 10px;
  }
}

.@{NEW_BLOCK_MODAL_CLASS},
.@{NEW_PAGE_CLASS} {
  .list-group {
    max-width: 600px;
    max-height: 400px;
    overflow-y: auto;
    .list-group-item {
      .clearfix;
      margin: 10px; //reset bootstrap

      h4 {
        //adjust bootstrap defaults
        margin-top: 12px;
        margin-bottom: 0px;
      }
      .preview,
      .caption {
        .pull-left;
      }

      .preview {
        .thumbnail;
        .fa {
          display: block;
          background-color: #FFFFFF;
          color: @btn-default-border;

          @size: 50px;
          @fontSize: @size * 0.8;
          font-size: @fontSize;
          width: @size;
          height: @size;
          line-height: @size + ((@size - @fontSize)/2); //more or less does the trick
          text-align: center;
          .opacity(0.5);
        }

        margin: 0 20px 0 0; //reset bootstrap thumbnail
      }
      .caption {
        p {
          margin-bottom: 0; //reset
        }
      }
    }
  }
}

//-----MEDIUM EDITOR-----
.medium-editor-placeholder {
  position: relative;

  &:after {
    content: attr(data-placeholder) !important;
    font-style: italic;
    left: 0;
    position: absolute;
    top: 0;
    white-space: pre;
  }
}

.medium-editor-toolbar {
  left: 0;
  position: absolute;
  top: 0;
  visibility: hidden;
  z-index: 2000;

  .form-inline();
  &:extend(.form-inline);

  ul.medium-editor-toolbar-actions {
    .btn-group();
    .list-unstyled();
    .list-inline();

    padding: 0;
    margin: 0;

    & > li {
      margin: 0;
      padding: 0;

      button {
        //last one removes double border
        &:extend(.btn, .btn-default, .btn-group .btn + .btn);

        &.medium-editor-button-active {
          .btn.active;
          .btn-default.active;
        }


        .border-radius(0, 0, 0, 0) !important;
        .box-shadow(none) !important;
      }
    }
  }
}

.medium-editor-toolbar-active {
  visibility: visible;
}

.medium-editor-sticky-toolbar {
  position: fixed;
  top: 1px;
}

.medium-editor-hidden {
  display: none;
}

.medium-editor-toolbar-form {
  display: none;

  border: 1px solid @btn-default-border;
  padding: 3px 3px;
  background-color: #FFFFFF;

  @inputWidth: 250px; //makes sure the form doesn't grow when the inline buttons are shown (little css bug to fix)
  input {
    width: @inputWidth;
  }
  .input-group {
    .inline-input-buttons();
    width: @inputWidth;
  }
  .btn-primary {
    margin-left: 5px;
  }
}





